"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TONClientError = exports.TONContractExitCode = exports.TONErrorCode = exports.TONErrorSource = exports.emptyTONErrorData = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var emptyTONErrorData = {
  core_version: '',
  config_server: '',
  query_url: ''
};
exports.emptyTONErrorData = emptyTONErrorData;
var TONErrorSource = {
  CLIENT: 'client',
  NODE: 'node'
};
exports.TONErrorSource = TONErrorSource;
var TONErrorCode = {
  CLIENT_IS_NOT_SETUP: 1000,
  SEND_NODE_REQUEST_FAILED: 1001,
  MESSAGE_ALREADY_EXPIRED: 1001,
  RUN_LOCAL_ACCOUNT_DOES_NOT_EXISTS: 1002,
  WAIT_FOR_TIMEOUT: 1003,
  INTERNAL_ERROR: 1004,
  QUERY_FAILED: 1005,
  MESSAGE_EXPIRED: 1006,
  SERVER_DOESNT_SUPPORT_AGGREGATIONS: 1007,
  INVALID_CONS: 1008,
  ADDRESS_REQUIRED_FOR_RUN_LOCAL: 1009,
  NETWORK_SILENT: 1010,
  TRANSACTION_LAG: 1011,
  TRANSACTION_WAIT_TIMEOUT: 1012,
  CLOCK_OUT_OF_SYNC: 1013,
  ACCOUNT_MISSING: 1014,
  ACCOUNT_CODE_MISSING: 1015,
  ACCOUNT_BALANCE_TOO_LOW: 1016,
  ACCOUNT_FROZEN_OR_DELETED: 1017,
  // Contracts
  CONTRACT_EXECUTION_FAILED: 3025,
  // Queries
  QUERY_FORCIBLY_ABORTED: 4005
};
exports.TONErrorCode = TONErrorCode;
var TONContractExitCode = {
  REPLAY_PROTECTION: 52,
  MESSAGE_EXPIRED: 57,
  NO_GAS: 13
};
exports.TONContractExitCode = TONContractExitCode;

var TONClientError = /*#__PURE__*/function () {
  function TONClientError(code, message, data, source) {
    _classCallCheck(this, TONClientError);

    _defineProperty(this, "message", void 0);

    _defineProperty(this, "source", void 0);

    _defineProperty(this, "code", void 0);

    _defineProperty(this, "data", void 0);

    this.code = code;
    this.message = message;
    this.data = data;
    this.source = source || TONErrorSource.CLIENT;
  }

  _createClass(TONClientError, null, [{
    key: "isClientError",
    value: function isClientError(error, code) {
      return error.source === TONErrorSource.CLIENT && error.code === code;
    }
  }, {
    key: "isNodeError",
    value: function isNodeError(error, code) {
      return error.source === TONErrorSource.NODE && error.code === code;
    }
  }, {
    key: "isContractError",
    value: function isContractError(error, exitCode) {
      return error.source === TONErrorSource.NODE && error.code === TONErrorCode.CONTRACT_EXECUTION_FAILED && error.data && error.data.exit_code === exitCode;
    }
  }, {
    key: "isOriginalContractError",
    value: function isOriginalContractError(error, exitCode) {
      var _error$data;

      return TONClientError.isContractError(error, exitCode) && !((_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.original_error);
    }
  }, {
    key: "isResolvedContractErrorAfterExpire",
    value: function isResolvedContractErrorAfterExpire(error, exitCode) {
      return TONClientError.isContractError(error, exitCode) && error.data && error.data.original_error && TONClientError.isMessageExpired(error.data.original_error);
    }
  }, {
    key: "internalError",
    value: function internalError(message, data) {
      return new TONClientError(TONErrorCode.INTERNAL_ERROR, "Internal error: ".concat(message), data);
    }
  }, {
    key: "invalidCons",
    value: function invalidCons(data) {
      return new TONClientError(TONErrorCode.INVALID_CONS, 'Invalid CONS structure. Each CONS item must contains of two elements.', data);
    }
  }, {
    key: "sendNodeRequestFailed",
    value: function sendNodeRequestFailed(responseText, data) {
      return new TONClientError(TONErrorCode.SEND_NODE_REQUEST_FAILED, "Send node request failed: ".concat(responseText), data);
    }
  }, {
    key: "runLocalAccountDoesNotExists",
    value: function runLocalAccountDoesNotExists(functionName, address, data) {
      return new TONClientError(TONErrorCode.RUN_LOCAL_ACCOUNT_DOES_NOT_EXISTS, "[".concat(functionName, "] run local failed: account [").concat(address, "] does not exists"), data);
    }
  }, {
    key: "waitForTimeout",
    value: function waitForTimeout(data) {
      return new TONClientError(TONErrorCode.WAIT_FOR_TIMEOUT, 'Wait for operation rejected on timeout', data);
    }
  }, {
    key: "queryFailed",
    value: function queryFailed(errors, data) {
      return new TONClientError(TONErrorCode.QUERY_FAILED, "Query failed: ".concat(errors.map(function (x) {
        return x.message || x.toString();
      }).join('\n')), data);
    }
  }, {
    key: "formatTime",
    value: function formatTime(time) {
      if (time) {
        return "".concat(new Date(time * 1000).toISOString(), " (").concat(time, ")");
      }

      return null;
    }
  }, {
    key: "messageExpired",
    value: function messageExpired(data) {
      return new TONClientError(TONErrorCode.MESSAGE_EXPIRED, 'Message expired', _objectSpread(_objectSpread({}, data), {}, {
        sending_time: TONClientError.formatTime(data.sending_time),
        expiration_time: TONClientError.formatTime(data.expire),
        block_time: TONClientError.formatTime(data.block_time)
      }), TONErrorSource.CLIENT);
    }
  }, {
    key: "serverDoesntSupportAggregations",
    value: function serverDoesntSupportAggregations(data) {
      return new TONClientError(TONErrorCode.SERVER_DOESNT_SUPPORT_AGGREGATIONS, 'Server doesn\'t support aggregations', data);
    }
  }, {
    key: "addressRequiredForRunLocal",
    value: function addressRequiredForRunLocal(data) {
      return new TONClientError(TONErrorCode.ADDRESS_REQUIRED_FOR_RUN_LOCAL, 'Address required for run local. You haven\'t specified contract code or data ' + 'so address is required to load missing parts from network.', data);
    }
  }, {
    key: "networkSilent",
    value: function networkSilent(data) {
      return new TONClientError(TONErrorCode.NETWORK_SILENT, 'Network silent: no blocks produced during timeout.', _objectSpread(_objectSpread({}, data), {}, {
        sending_time: TONClientError.formatTime(data.sending_time),
        expiration_time: TONClientError.formatTime(data.expire)
      }));
    }
  }, {
    key: "transactionWaitTimeout",
    value: function transactionWaitTimeout(data) {
      return new TONClientError(TONErrorCode.TRANSACTION_WAIT_TIMEOUT, 'Transaction did not produced during specified timeout', _objectSpread(_objectSpread({}, data), {}, {
        sending_time: TONClientError.formatTime(data.sending_time)
      }));
    }
  }, {
    key: "clockOutOfSync",
    value: function clockOutOfSync(data) {
      return new TONClientError(TONErrorCode.CLOCK_OUT_OF_SYNC, 'You local clock is out of sync with the server time. ' + 'It is a critical condition for sending messages to the blockchain. ' + 'Please sync you clock with the internet time.', data);
    }
  }, {
    key: "accountMissing",
    value: function accountMissing(address, data) {
      return new TONClientError(TONErrorCode.ACCOUNT_MISSING, "Account with address [".concat(address, "] doesn't exists. ") + 'You have to prepaid this account to have a positive balance on them and then deploy ' + 'a contract code for this account.' + 'See SDK documentation for detailed instructions.', data);
    }
  }, {
    key: "accountCodeMissing",
    value: function accountCodeMissing(address, balance, data) {
      return new TONClientError(TONErrorCode.ACCOUNT_CODE_MISSING, "Account with address [".concat(address, "] exists but haven't a contract code yet. ") + 'You have to ensure that an account has an enough balance for deploying ' + 'a contract code and then deploy a contract code for this account. ' + "Current account balance is [".concat(balance, "]. ") + 'See SDK documentation for detailed instructions.', data);
    }
  }, {
    key: "accountBalanceTooLow",
    value: function accountBalanceTooLow(address, balance, data) {
      return new TONClientError(TONErrorCode.ACCOUNT_BALANCE_TOO_LOW, "Account with address [".concat(address, "] has too low balance [").concat(balance, "]. ") + 'You have to send some value to account balance from other contract ' + '(e.g. Wallet contract). ' + 'See SDK documentation for detailed instructions.', data);
    }
  }, {
    key: "noBlocks",
    value: function noBlocks(workchain, data) {
      var workchainName = workchain === -1 ? 'masterchain' : "workchain ".concat(workchain);
      return new TONClientError(TONErrorCode.NETWORK_SILENT, "\"No blocks for ".concat(workchainName, " found\"."), data);
    }
  }, {
    key: "invalidBlockchain",
    value: function invalidBlockchain(message, data) {
      return new TONClientError(TONErrorCode.NETWORK_SILENT, message, data);
    }
  }, {
    key: "queryForciblyAborted",
    value: function queryForciblyAborted(data) {
      return new TONClientError(TONErrorCode.QUERY_FORCIBLY_ABORTED, 'GraphQL query was forcibly aborted on timeout.', data);
    }
  }, {
    key: "isMessageExpired",
    value: function isMessageExpired(error) {
      return TONClientError.isClientError(error, TONErrorCode.MESSAGE_EXPIRED);
    }
  }, {
    key: "isWaitForTimeout",
    value: function isWaitForTimeout(error) {
      return TONClientError.isClientError(error, TONErrorCode.WAIT_FOR_TIMEOUT);
    }
  }, {
    key: "clientIsNotSetup",
    value: function clientIsNotSetup() {
      return new TONClientError(TONErrorCode.CLIENT_IS_NOT_SETUP, 'TON Client Library isn\'t set up properly', emptyTONErrorData);
    }
  }]);

  return TONClientError;
}();

exports.TONClientError = TONClientError;

_defineProperty(TONClientError, "source", TONErrorSource);

_defineProperty(TONClientError, "code", TONErrorCode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,